{info: {title: Sports Data API, version: v3}, openapi: 3.0.1, paths: {'/best-bets/{season_name}/{week_number}': {
      get: {operationId: 1312, parameters: [{description: 'The name of the season.
              Examples: 2022REG', in: query, name: season_name, required: true, schema: {
              type: string}}, {description: 'The name of the week. Example: 16', in: query,
            name: week_number, required: true, schema: {type: integer}}], summary: Weekly
          Best Bets, tags: []}}, '/best-bets/{season_name}/{week_number}/picks': {
      get: {operationId: 1471, parameters: [{description: 'The name of the season.
              Examples: 2022REG', in: query, name: season_name, required: true, schema: {
              type: string}}, {description: 'The name of the week. Example: 16', in: query,
            name: week_number, required: true, schema: {type: integer}}], summary: Weekly
          Best Bets Game Picks, tags: []}}, /changelog: {get: {operationId: 1305,
        parameters: [], summary: Returns the most recent 100 changelog events that
          triggered new simulation runs., tags: []}}, '/projections/games/{game_id}': {
      get: {operationId: 1306, parameters: [{description: The SportsDataIO GameId
              for the game desired. This value is a number., in: query, name: game_id,
            required: true, schema: {type: integer}}], summary: Returns the projected
          game and team outcomes for a given game., tags: [BAKER Predictions Feeds]}},
    '/projections/players/{season_name}/{week_number}/avg': {get: {operationId: 1307,
        parameters: [{description: 'The name of the season. Examples: 2022REG', in: query,
            name: season_name, required: true, schema: {type: string}}, {description: 'The
              name of the week. Example: 16', in: query, name: week_number, required: true,
            schema: {type: integer}}], summary: 'Returns the average projected statsistics
          for the top 50 players sorted by the sort_by parameter.Can be filtered by
          game_id, team, and position.To retreive all players efficiently, use the
          /team endpoint or the /stat endpoint and call them for each team or statistic
          required.', tags: [BAKER Projections  Points Feeds]}}, '/projections/players/{season_name}/{week_number}/stat/{stat}/avg': {
      get: {operationId: 1309, parameters: [{description: 'The name of the season.
              Examples: 2022REG', in: query, name: season_name, required: true, schema: {
              type: string}}, {description: 'The name of the week. Example: 16', in: query,
            name: week_number, required: true, schema: {type: integer}}, {description: 'The
              name of the statistic desired. Example: rushing_attempts', in: query,
            name: stat, required: true, schema: {type: string}}], summary: Returns
          the average projected statistic for up to 500 players sorted in descending
          order., tags: [BAKER Projections  Points Feeds]}}, '/projections/players/{season_name}/{week_number}/stat/{stat}/percentile/{percentile}': {
      get: {operationId: 1311, parameters: [{description: 'The name of the season.
              Examples: 2022REG', in: query, name: season_name, required: true, schema: {
              type: string}}, {description: 'The name of the statistic desired. Example:
              rushing_attempts', in: query, name: stat, required: true, schema: {
              type: string}}, {description: 'The name of the week. Example: 16', in: query,
            name: week_number, required: true, schema: {type: integer}}, {description: 'The
              desired percentile for the distribution of the projections. Example:
              90', in: query, name: percentile, required: true, schema: {type: integer}}],
        summary: Returns the percentile of the projected statistic for up to 500 players
          sorted in descending order., tags: [BAKER Projections  Points Feeds]}},
    '/projections/players/{season_name}/{week_number}/team/{team}/avg': {get: {operationId: 1308,
        parameters: [{description: 'The name of the season. Examples: 2022REG', in: query,
            name: season_name, required: true, schema: {type: string}}, {description: 'The
              name of the week. Example: 16', in: query, name: week_number, required: true,
            schema: {type: integer}}, {description: 'The Key indicator of the team
              desired. Example: NE', in: query, name: team, required: true, schema: {
              type: string}}], summary: Returns the average projections for all players
          on the specified team., tags: [BAKER Projections  Points Feeds]}}, '/projections/players/{season_name}/{week_number}/team/{team}/percentile/{percentile}': {
      get: {operationId: 1310, parameters: [{description: 'The name of the season.
              Examples: 2022REG', in: query, name: season_name, required: true, schema: {
              type: string}}, {description: 'The name of the week. Example: 16', in: query,
            name: week_number, required: true, schema: {type: integer}}, {description: 'The
              Key indicator of the team desired. Example: NE', in: query, name: team,
            required: true, schema: {type: string}}, {description: 'The desired percentile
              for the distribution of the projections. Example: 90', in: query, name: percentile,
            required: true, schema: {type: integer}}], summary: Returns a percentile
          of projections for all players on the specified team., tags: [BAKER Projections  Points
            Feeds]}}, '/{format}/ActiveSportsbooks': {get: {operationId: 1192, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}], summary: Returns
          a list for mapping SportsbookID to the Sportsbook name., tags: [Active Books  Metadata
            Feeds]}}, '/{format}/AdvancedPlayerGameStats/{season}/{week}': {get: {
        operationId: 1038, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: 'Year of the season and the season type.
              If no season type is provided, then the default is regular season. brExamples:
              2018REG, 2018PRE, 2018POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4. Example: 1', in: query, name: week, required: true, schema: {
              type: integer}}], summary: null, tags: []}}, '/{format}/AdvancedPlayerGameStatsByPlayerID/{season}/{playerid}': {
      get: {operationId: 1039, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.
              brExamples: 2018REG, 2018PRE, 2018POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Each NFL player has a unique ID
              assigned by FantasyData. Player IDs can be determined by pulling player
              related data. Example:732.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: []}}, '/{format}/AdvancedPlayerInfo/{playerid}': {
      get: {operationId: 1040, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Each NFL player has a unique ID
              assigned by FantasyData. Player IDs can be determined by pulling player
              related data. Example:732.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: []}}, '/{format}/AdvancedPlayerSeasonStats/{season}/{team}': {
      get: {operationId: 1042, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.
              brExamples: 2018REG, 2018PRE, 2018POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: []}}, '/{format}/AdvancedPlayerSeasonStatsByPlayerID/{season}/{playerid}': {
      get: {operationId: 1041, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.
              brExamples: 2018REG, 2018PRE, 2018POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Each NFL player has a unique ID
              assigned by FantasyData. Player IDs can be determined by pulling player
              related data. Example:732.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: []}}, '/{format}/AdvancedPlayers': {
      get: {operationId: 1043, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: null, tags: []}}, '/{format}/AllTeams': {
      get: {operationId: 153, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: 'Gets all teams, including pro bowl
          teams.', tags: ['Teams, Stadiums  Coaches Feeds']}}, '/{format}/AlternateMarketGameOddsByWeek/{season}/{week}': {
      get: {operationId: 1070, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season, with optional
              season type. brExamples: 2018, 2018POST, etc.', in: query, name: season,
            required: true, schema: {type: string}}, {description: 'The week of the
              scores (games). brExamples: 1, 2, etc.', in: query, name: week, required: true,
            schema: {type: integer}}], summary: 'Returns the non-full-game odds for
          games in a given week  season. This means odds such as 1st-half or 1st-quarter,
          rather than full game. Only returns the most recently seen odds, not-including
          line movement.', tags: [Pre-Match Game Lines Feeds]}}, '/{format}/AlternateMarketGameOddsLineMovement/{scoreid}': {
      get: {operationId: 1071, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The ScoreID of an NFL score (game).  ScoreIDs
              can be found in the Scores API.  Valid entries are 16654 or 16667, in: query,
            name: scoreid, required: true, schema: {type: integer}}], summary: 'Returns
          the non-full-game odds for games in a given ScoreID. This means odds such
          as 1st-half or 1st-quarter, rather than full game. Returns the full line
          movement for the given game. This endpoint has a longer cache as it is meant
          for historical data/line movement rather than the most up to the second
          line.', tags: [Pre-Match Game Lines Feeds]}}, '/{format}/AreAnyGamesInProgress': {
      get: {operationId: 134, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Returns true if there is at least one
          game being played at the time of the request or false if there are none.,
        tags: [Schedules  Game Day Info Feeds]}}, '/{format}/BettingEvents/{season}': {
      get: {operationId: 1142, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the seasonbrExamples:
              2020, 2021, etc.', in: query, name: season, required: true, schema: {
              type: string}}], summary: Returns the full list of BetttingEvents for
          the given season. This does not take season-type (PRE/POST etc) into account.
          Intended for those who need to tie BettingEventIDs to ScoreIDs., tags: [
          Futures Feeds, Props Feeds]}}, '/{format}/BettingEventsByDate/{date}': {
      get: {operationId: 1141, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The date of the game(s). brExamples:
              2020-09-10, 2020-09-13.', in: query, name: date, required: true, schema: {
              type: string}}], summary: The list of current BettingEvents for the
          given date. Events in this include market information but no outcomes will
          be included here. Intended to allow both visibility to Events in order to
          match up Events - Scores via the included ScoreID (where applicable) as
          well as provide a list of MarketIDs which are included in the given event.,
        tags: [Futures Feeds, Props Feeds]}}, '/{format}/BettingFuturesBySeason/{season}': {
      get: {operationId: 1143, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season (with optional
              season type).brExamples: 2020REG, 2020PRE, 2020POST, 2021, etc.', in: query,
            name: season, required: true, schema: {type: string}}], summary: Returns
          available Futures outcomes for the given season. Does not include line movement.,
        tags: [Futures Feeds]}}, '/{format}/BettingMarket/{marketId}': {get: {operationId: 1144,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: The MarketId of the desired market for which to pull all outcomes/bets.,
            in: query, name: marketId, required: true, schema: {type: string}}], summary: Returns
          full line movement for a given BettingMarket. Is intended for historical
          data purposes and not for the most up to the second lines., tags: [Futures
            Feeds, Props Feeds]}}, '/{format}/BettingMarketResults/{marketId}': {
      get: {operationId: 1224, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The MarketId of the desired market
              for which to pull all outcomes/bets., in: query, name: marketId, required: true,
            schema: {type: string}}], summary: Returns all outcomes under this market
          which have a result type associated. Will return empty list if resulting
          has not yet processed for the given game. Resulting processes shortly after
          game closing., tags: [Aggregated Odds Resulting Feeds]}}, '/{format}/BettingMarkets/{eventId}': {
      get: {operationId: 1145, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The EventId of the desired event/game
              for which to pull all betting markets (includes outcomes/bets)., in: query,
            name: eventId, required: true, schema: {type: string}}], summary: Returns
          the markets and available outcomes for a given BettingEventID., tags: [
          Futures Feeds, Props Feeds]}}, '/{format}/BettingMarketsByMarketType/{eventId}/{marketTypeID}': {
      get: {operationId: 1146, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The EventId of the desired event/game
              for which to pull all betting markets (includes outcomes/bets)., in: query,
            name: eventId, required: true, schema: {type: string}}, {description: 'The
              Market Type ID of the desired MarketTypes to pull. Some common types
              include: 1 for Game Lines, 2 for Player Props, 3 for Team Props, 6 for
              Game Props', in: query, name: marketTypeID, required: true, schema: {
              type: string}}], summary: 'Returns Markets and available outcomes for
          a given event and market type requested. A lighter call than by BettingEventID
          as it only includes markets tagged with the specific MarketType (1 - GameLines,
          2 - Player Props, etc -- full list available in the BettingMetaData endpoint).',
        tags: [Futures Feeds, Props Feeds]}}, '/{format}/BettingMarketsByScoreID/{scoreid}': {
      get: {operationId: 1147, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The ScoreID of the desired game/score
              for which to pull all betting markets (includes outcomes/bets)., in: query,
            name: scoreid, required: true, schema: {type: integer}}], summary: Returns
          the markets and available outcomes for a given ScoreID. Works the same as
          by BettingEventID but requires less ID mapping., tags: [Futures Feeds, Props
            Feeds]}}, '/{format}/BettingMetadata': {get: {operationId: 1185, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}], summary: 'Returns
          the list of MarketTypes, BetTypes, PeriodTypes, OutcomeTypes, and ResultTypes
          to map the IDs to descriptive names. Also includes a list of the MarketType,
          BetType  PeriodType combinations which we will have resulting for.', tags: [
          Active Books  Metadata Feeds]}}, '/{format}/BettingPlayerPropsByScoreID/{scoreid}': {
      get: {operationId: 1247, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The unique ScoreID of the game
              in question., in: query, name: scoreid, required: true, schema: {type: integer}}],
        summary: Gets the available player props Markets  Outcomes for a given ScoreID.,
        tags: [Props Feeds]}}, '/{format}/BettingSplitsByMarketId/{marketId}': {get: {
        operationId: 1211, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: The BettingMarketID of the market you
              would like to get splits for. Note that markets we do not have split
              information on will return an empty response., in: query, name: marketId,
            required: true, schema: {type: string}}], summary: List of Money and Bet
          Percentage splits for each outcome type available in this market. This specific
          endpoint will return the movement from this market as well as the most recent.,
        tags: [Betting Splits Feeds]}}, '/{format}/BettingSplitsByScoreId/{scoreId}': {
      get: {operationId: 1212, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The ScoreID of the desired game
              to get Betting Market Splits for, in: query, name: scoreId, required: true,
            schema: {type: integer}}], summary: List of Money and Bet Percentage splits
          for each market and their respective outcome types available in this game.
          This specific endpoint will return current splits for each available market
          and no line movement., tags: [Betting Splits Feeds]}}, '/{format}/BoxScoreByScoreIDV3/{scoreid}': {
      get: {operationId: 161, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The ScoreID of the game. Possible
              values include: 16247, 16245, etc.', in: query, name: scoreid, required: true,
            schema: {type: integer}}], summary: null, tags: [Box Scores Feeds]}},
    '/{format}/BoxScoreV3/{season}/{week}/{hometeam}': {get: {operationId: 162, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}},
          {description: 'Week of the season. Valid values are as follows: Preseason
              0 to 4, Regular Season 1 to 17, Postseason 1 to 4.          Example:
              1', in: query, name: week, required: true, schema: {type: integer}},
          {description: 'Abbreviation of a team playing in this game. Example: WAS.',
            in: query, name: hometeam, required: true, schema: {type: string}}], summary: null,
        tags: [Box Scores Feeds]}}, '/{format}/BoxScoresDeltaV3/{season}/{week}/{playerstoinclude}/{minutes}': {
      get: {operationId: 163, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'The subcategory of players to
              include in the returned PlayerGame records. Possible values include:brbrall
              Returns all playersbrfantasy Returns traditional fantasy players (QB,
              RB, WR, TE, K, DST)bridp Returns traditional fantasy players and IDP
              players.', in: query, name: playerstoinclude, required: true, schema: {
              type: string}}, {description: 'Only returns player statistics that have
              changed in the last X minutes.  You specify how many minutes in time
              to go back.  Valid entries are:br1, 2, etc.', in: query, name: minutes,
            required: true, schema: {type: string}}], summary: 'This method returns
          all box scores for a given season and week, but only returns player stats
          that have changed in the last X minutes. You can also filter by type of
          player stats to include, such as traditional fantasy players, IDP players
          or all players.', tags: [Box Scores Feeds]}}, '/{format}/Byes/{season}': {
      get: {operationId: 135, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: Get bye weeks for the teams during
          a specified NFL season., tags: [Schedules  Game Day Info Feeds]}}, '/{format}/CurrentSeason': {
      get: {operationId: 145, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Year of the current NFL season. This
          value changes at the start of the new NFL league year. The earliest season
          for Fantasy data is 2001. The earliest season for Team data is 1985. The
          earliest season for Fantasy data is 2001. The earliest season for Team data
          is 1985., tags: [Schedules  Game Day Info Feeds]}}, '/{format}/CurrentWeek': {
      get: {operationId: 156, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Number of the current week of the NFL
          season. This value usually changes on Tuesday nights or Wednesday mornings
          at midnight ET., tags: [Schedules  Game Day Info Feeds]}}, '/{format}/DailyFantasyPlayers/{date}': {
      get: {operationId: 165, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The date of the contest for which
              youre pulling players          2014-SEP-21,          2014-NOV-15, etc',
            in: query, name: date, required: true, schema: {type: string}}], summary: null,
        tags: [Fantasy Info Feeds]}}, '/{format}/DailyFantasyPoints/{date}': {get: {
        operationId: 166, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: 'The date of the contest for which youre
              pulling players          2014-SEP-21,          2014-NOV-15, etc', in: query,
            name: date, required: true, schema: {type: string}}], summary: null, tags: [
          Fantasy Info Feeds]}}, '/{format}/DepthCharts': {get: {operationId: 1279,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}}],
        summary: 'Depth charts for all NFL teams split by offensive, defensive, and
          special teams position groupings.', tags: [Depth Charts Feeds]}}, '/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}': {
      get: {operationId: 1233, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: SlateID of the DFS Slate you wish
              to get ownership projections for. Will have an empty SlateOwnershipProjections
              if this slate was not projected, in: query, name: slateId, required: true,
            schema: {type: string}}], summary: Slate Ownership Projections for a specific
          slate. Projections are for GPP format ownership. Will return an empty list
          if the slate is not yet projected or not a slate we have projections for.,
        tags: [Salaries  Slates Feeds]}}, '/{format}/DfsSlatesByDate/{date}': {get: {
        operationId: 115, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: 'The date of the slates.brExamples: 2017-SEP-25,
              2017-10-31.', in: query, name: date, required: true, schema: {type: string}}],
        summary: null, tags: [Salaries  Slates Feeds]}}, '/{format}/DfsSlatesByWeek/{season}/{week}': {
      get: {operationId: 116, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Salaries  Slates Feeds]}},
    '/{format}/FantasyDefenseByGame/{season}/{week}': {get: {operationId: 169, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}},
          {description: 'Week of the season. Valid values are as follows: Preseason
              0 to 4, Regular Season 1 to 17, Postseason 1 to 4.          Example:
              1', in: query, name: week, required: true, schema: {type: integer}}],
        summary: null, tags: [Fantasy Info Feeds]}}, '/{format}/FantasyDefenseByGameByTeam/{season}/{week}/{team}': {
      get: {operationId: 170, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Fantasy Info Feeds]}}, '/{format}/FantasyDefenseBySeason/{season}': {
      get: {operationId: 171, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Fantasy Info Feeds]}},
    '/{format}/FantasyDefenseBySeasonByTeam/{season}/{team}': {get: {operationId: 172,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Fantasy Info Feeds]}}, '/{format}/FantasyDefenseProjectionsByGame/{season}/{week}': {
      get: {operationId: 117, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/FantasyDefenseProjectionsBySeason/{season}': {get: {operationId: 118,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/FantasyPlayers': {get: {operationId: 174, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}], summary: 'This method returns
          a comprehensive list of draftable fantasy football players, including QB,
          RB, WR, TE, K and DEF.  Players are sorted by ADP (AverageDraftPosition).',
        tags: [Fantasy Info Feeds]}}, '/{format}/FreeAgents': {get: {operationId: 194,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}}],
        summary: null, tags: [Depth Charts Feeds, Injuries Feeds, Rosters  Profiles
            Feeds]}}, '/{format}/GameLeagueLeaders/{season}/{week}/{position}/{column}': {
      get: {operationId: 181, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: "Player\u2019s position that you\
              \ would like to filter by.", in: query, name: position, required: true,
            schema: {type: string}}, {description: Response member you would like
              results sorted by., in: query, name: column, required: true, schema: {
              type: string}}], summary: null, tags: [Box Scores Feeds]}}, '/{format}/GameOddsByWeek/{season}/{week}': {
      get: {operationId: 693, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season, with optional
              season type. brExamples: 2018, 2018POST, etc.', in: query, name: season,
            required: true, schema: {type: string}}, {description: 'The week of the
              scores (games). brExamples: 1, 2, etc.', in: query, name: week, required: true,
            schema: {type: integer}}], summary: 'Returns the full-game core odds for
          games in a given week  season. This means moneyline, spread, and total.
          Only returns the most recently seen odds, not-including line movement.',
        tags: [Pre-Match Game Lines Feeds]}}, '/{format}/GameOddsLineMovement/{scoreid}': {
      get: {operationId: 694, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The ScoreID of an NFL score (game).  ScoreIDs
              can be found in the Scores API.  Valid entries are 16654 or 16667, in: query,
            name: scoreid, required: true, schema: {type: integer}}], summary: 'Returns
          the full-game core odds for a given ScoreID. This means moneyline, spread,
          and total. Only returns the most recently seen odds, not-including line
          movement. This endpoint has a longer cache as it is meant for historical
          data/line movement rather than the most up to the second line.', tags: [
          Pre-Match Game Lines Feeds]}}, '/{format}/GamePredictions/{season}/{week}': {
      get: {operationId: 1052, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.
              brExamples: 2019REG, 2019PRE, 2019POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4. Example: 1', in: query, name: week, required: true, schema: {
              type: integer}}], summary: null, tags: []}}, '/{format}/Headshots': {
      get: {operationId: 1044, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: null, tags: [Player Headshots Feeds]}},
    '/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}': {
      get: {operationId: 713, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Each NFL player has a unique
              ID assigned by FantasyData. Player IDs can be determined by pulling
              player related data. Example:14257.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}': {get: {
        operationId: 714, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: 'Year of the season and the season type.
              If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Projections  Points Feeds]}}, '/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}': {
      get: {operationId: 715, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/InjuredPlayers': {get: {operationId: 1253, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}], summary: 'This endpoint provides
          all currently injured NFL players, along with injury details.', tags: [
          Injuries Feeds]}}, '/{format}/Injuries/{season}/{week}': {get: {operationId: 178,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Injuries Feeds]}}, '/{format}/Injuries/{season}/{week}/{team}': {
      get: {operationId: 179, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Injuries Feeds]}}, '/{format}/LastCompletedSeason': {
      get: {operationId: 146, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Year of the most recently completed
          season. this value changes immediately after the Super Bowl. The earliest
          season for Fantasy data is 2001. The earliest season for Team data is 1985.,
        tags: [Schedules  Game Day Info Feeds]}}, '/{format}/LastCompletedWeek': {
      get: {operationId: 157, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Number of the last completed week of
          the NFL season. This value usually changes on Tuesday nights or Wednesday
          mornings at midnight ET., tags: [Schedules  Game Day Info Feeds]}}, '/{format}/LiveGameOddsByWeek/{season}/{week}': {
      get: {operationId: 691, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season, with optional
              season type. brExamples: 2018, 2018POST, etc.', in: query, name: season,
            required: true, schema: {type: string}}, {description: 'The week of the
              scores (games). brExamples: 1, 2, etc.', in: query, name: week, required: true,
            schema: {type: integer}}], summary: Provides in-play odds data for a given
          week. This means odds for games which are in-progress. Only serves the most
          recently seen data  does not include line movement., tags: [In-Play Game
            Lines Feeds]}}, '/{format}/LiveGameOddsLineMovement/{scoreid}': {get: {
        operationId: 692, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: The ScoreID of an NFL score (game).  ScoreIDs
              can be found in the Scores API.  Valid entries are 16654 or 16667, in: query,
            name: scoreid, required: true, schema: {type: integer}}], summary: Provides
          in-play odds line movement data for a given game. This means odds for games
          which are in-progress. Serves full line movement and is intended for showing
          the trend over a game rather than the most up-to-the second lines., tags: [
          In-Play Game Lines Feeds]}}, '/{format}/MatchupTrends/{team}/{opponent}': {
      get: {operationId: 1112, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Abbreviation of a team. Example:
              PHI.', in: query, name: team, required: true, schema: {type: string}},
          {description: 'Abbreviation of an opponent. Example: NE.', in: query, name: opponent,
            required: true, schema: {type: string}}], summary: Returns trends data
          for a given pairing of teams. Will return data even if the teams are not
          set to play this season. Intended for use on a specific game though it will
          work for other comparisons if applicable., tags: [Matchups  Trends Feeds]}},
    '/{format}/News': {get: {operationId: 138, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}], summary: null, tags: []}}, '/{format}/NewsByDate/{date}': {
      get: {operationId: 139, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The date of the news.brExamples:
              2017-JUL-31, 2017-SEP-01.', in: query, name: date, required: true, schema: {
              type: string}}], summary: null, tags: []}}, '/{format}/NewsByPlayerID/{playerid}': {
      get: {operationId: 140, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Each NFL player has a unique ID
              assigned by FantasyData. Player IDs can be determined by pulling player
              related data. Example:14257.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: []}}, '/{format}/NewsByTeam/{team}': {
      get: {operationId: 141, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: []}}, '/{format}/PlayByPlay/{gameid}': {get: {operationId: 1474,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: The GameID of a NFL game.  GameIDs can be found in the Games
              API.  Valid entries are 14620 or 16905, in: query, name: gameid, required: true,
            schema: {type: integer}}], summary: null, tags: [Play by Play Feeds]}},
    '/{format}/PlayByPlay/{season}/{week}/{hometeam}': {get: {operationId: 113, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}},
          {description: 'Week of the season. Valid values are as follows: Preseason
              0 to 4, Regular Season 1 to 17, Postseason 1 to 4.          Example:
              1', in: query, name: week, required: true, schema: {type: integer}},
          {description: 'Abbreviation of the home team. Example: WAS.', in: query,
            name: hometeam, required: true, schema: {type: string}}], summary: null,
        tags: [Play by Play Feeds]}}, '/{format}/PlayByPlayDelta/{season}/{week}/{minutes}': {
      get: {operationId: 677, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Only returns player statistics
              that have changed in the last X minutes.  You specify how many minutes
              in time to go back.  Valid entries are:br          1 or 2.', in: query,
            name: minutes, required: true, schema: {type: string}}], summary: null,
        tags: [Play by Play Feeds]}}, '/{format}/Player/{playerid}': {get: {operationId: 195,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Each NFL player has a unique ID assigned by FantasyData.
              Player IDs can be determined by pulling player related data. Example:732.',
            in: query, name: playerid, required: true, schema: {type: integer}}],
        summary: null, tags: [Depth Charts Feeds, Injuries Feeds, Rosters  Profiles
            Feeds]}}, '/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}': {
      get: {operationId: 120, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Projections  Points Feeds]}}, '/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}': {
      get: {operationId: 121, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/PlayerGameRedZoneInsideFiveStats/{season}/{week}': {get: {operationId: 716,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Split Stats Feeds]}},
    '/{format}/PlayerGameRedZoneInsideTenStats/{season}/{week}': {get: {operationId: 717,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Split Stats Feeds]}},
    '/{format}/PlayerGameRedZoneStats/{season}/{week}': {get: {operationId: 197, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}},
          {description: 'Week of the season. Valid values are as follows: Preseason
              0 to 4, Regular Season 1 to 17, Postseason 1 to 4.          Example:
              1', in: query, name: week, required: true, schema: {type: integer}}],
        summary: null, tags: [Split Stats Feeds]}}, '/{format}/PlayerGameStatsBySeason/{season}/{playerid}/{numberofgames}': {
      get: {operationId: 1097, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Season to get games from. Example
              2019POST, 2020', in: query, name: season, required: true, schema: {
              type: string}}, {description: 'Unique FantasyData Player ID. Example:17920.',
            in: query, name: playerid, required: true, schema: {type: integer}}, {
            description: 'How many games to return. Example all, 10, 25', in: query,
            name: numberofgames, required: true, schema: {type: string}}], summary: null,
        tags: [Box Scores Feeds]}}, '/{format}/PlayerGameStatsByTeam/{season}/{week}/{team}': {
      get: {operationId: 199, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Box Scores Feeds]}}, '/{format}/PlayerGameStatsByWeek/{season}/{week}': {
      get: {operationId: 200, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Box Scores Feeds]}},
    '/{format}/PlayerGameStatsByWeekDelta/{season}/{week}/{minutes}': {get: {operationId: 201,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Only returns player statistics
              that have changed in the last X minutes.  You specify how many minutes
              in time to go back.  Valid entries are:br          1 or 2.', in: query,
            name: minutes, required: true, schema: {type: string}}], summary: null,
        tags: [Box Scores Feeds]}}, '/{format}/PlayerGameStatsDelta/{minutes}': {
      get: {operationId: 202, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Only returns player statistics
              that have changed in the last X minutes.  You specify how many minutes
              in time to go back.  Valid entries are:          1 or 2.', in: query,
            name: minutes, required: true, schema: {type: string}}], summary: null,
        tags: [Box Scores Feeds]}}, '/{format}/PlayerOwnership/{season}/{week}': {
      get: {operationId: 173, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/PlayerSeasonProjectionStats/{season}': {get: {operationId: 122, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}}],
        summary: null, tags: [Projections  Points Feeds]}}, '/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}': {
      get: {operationId: 123, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Each NFL player has a unique ID
              assigned by FantasyData. Player IDs can be determined by pulling player
              related data. Example:14257.', in: query, name: playerid, required: true,
            schema: {type: integer}}], summary: null, tags: [Projections  Points Feeds]}},
    '/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}': {get: {operationId: 124,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Projections  Points Feeds]}}, '/{format}/PlayerSeasonRedZoneInsideFiveStats/{season}': {
      get: {operationId: 718, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Split Stats Feeds]}},
    '/{format}/PlayerSeasonRedZoneInsideTenStats/{season}': {get: {operationId: 719,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Split Stats Feeds]}},
    '/{format}/PlayerSeasonRedZoneStats/{season}': {get: {operationId: 203, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}}],
        summary: null, tags: [Split Stats Feeds]}}, '/{format}/PlayerSeasonStats/{season}': {
      get: {operationId: 204, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Box Scores Feeds]}}, '/{format}/PlayerSeasonStatsByTeam/{season}/{team}': {
      get: {operationId: 206, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Box Scores Feeds]}}, '/{format}/PlayerSeasonThirdDownStats/{season}': {
      get: {operationId: 207, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Split Stats Feeds]}},
    '/{format}/Players': {get: {operationId: 193, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}], summary: null, tags: [Depth
            Charts Feeds, Injuries Feeds, Rosters  Profiles Feeds]}}, '/{format}/Players/{team}': {
      get: {operationId: 808, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Depth Charts Feeds, Injuries Feeds, Rosters  Profiles
            Feeds]}}, '/{format}/PlayersBasic/{team}': {get: {operationId: 1434, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Abbreviation
              of the team. Example: WAS.', in: query, name: team, required: true,
            schema: {type: string}}], summary: null, tags: [Rosters  Profiles Feeds]}},
    '/{format}/PlayersByAvailable': {get: {operationId: 1454, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}], summary: null, tags: [Rosters  Profiles
            Feeds]}}, '/{format}/PlayersByFreeAgents': {get: {operationId: 1455, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}], summary: null,
        tags: [Rosters  Profiles Feeds]}}, '/{format}/PlayersByRookieDraftYear/{season}': {
      get: {operationId: 1456, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season.brExamples:
              2018, 2019, etc.', in: query, name: season, required: true, schema: {
              type: string}}], summary: null, tags: [Rosters  Profiles Feeds]}}, '/{format}/ProBowlers/{season}': {
      get: {operationId: 673, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the seasonbrExamples:
              2016, 2017', in: query, name: season, required: true, schema: {type: string}}],
        summary: null, tags: [Rosters  Profiles Feeds]}}, '/{format}/Referees': {
      get: {operationId: 1169, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Returns full list of NFL Referees,
        tags: [Referee Feeds]}}, '/{format}/Rookies/{season}': {get: {operationId: 836,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season.brExamples: 2018, 2019, etc.', in: query,
            name: season, required: true, schema: {type: string}}], summary: null,
        tags: [Depth Charts Feeds, Injuries Feeds, Rosters  Profiles Feeds]}}, '/{format}/RotoBallerPremiumNews': {
      get: {operationId: 130, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: null, tags: [Player News  Notes Feeds]}},
    '/{format}/RotoBallerPremiumNewsByDate/{date}': {get: {operationId: 131, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'The
              date of the news.brExamples: 2017-JUL-31, 2017-SEP-01.', in: query,
            name: date, required: true, schema: {type: string}}], summary: null, tags: [
          Player News  Notes Feeds]}}, '/{format}/RotoBallerPremiumNewsByPlayerID/{playerid}': {
      get: {operationId: 132, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Unique FantasyData Player ID.Example:10000507.',
            in: query, name: playerid, required: true, schema: {type: integer}}],
        summary: null, tags: [Player News  Notes Feeds]}}, '/{format}/RotoBallerPremiumNewsByTeam/{team}': {
      get: {operationId: 133, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Abbreviation of the team. Example:
              WAS.', in: query, name: team, required: true, schema: {type: string}}],
        summary: null, tags: [Player News  Notes Feeds]}}, '/{format}/RotoworldPlayerNews': {
      get: {operationId: 1333, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: null, tags: [Player News  Notes Feeds]}},
    '/{format}/RotoworldPlayerNewsByDate/{date}': {get: {operationId: 1334, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'The
              date of the news.brExamples: 2022-JUL-31, 2022-SEP-01.', in: query,
            name: date, required: true, schema: {type: string}}], summary: null, tags: [
          Player News  Notes Feeds]}}, '/{format}/Schedules/{season}': {get: {operationId: 208,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season (with optional season type).brExamples:
              2018, 2018PRE, 2018POST, 2018STAR, 2019, etc.', in: query, name: season,
            required: true, schema: {type: string}}], summary: Game schedule for a
          specified season., tags: [Schedules  Game Day Info Feeds]}}, '/{format}/SchedulesBasic/{season}': {
      get: {operationId: 1412, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season (with optional
              season type).brExamples: 2018, 2018PRE, 2018POST, 2018STAR, 2019, etc.',
            in: query, name: season, required: true, schema: {type: string}}], summary: Game
          schedule for a specified season., tags: [Schedules  Game Day Info Feeds]}},
    '/{format}/Scores/{season}': {get: {operationId: 899, parameters: [{description: Desired
              response format. Valid entries are XML or JSON., in: query, name: format,
            required: true, schema: {type: string}}, {description: 'Year of the season
              (with optional season type).brExamples: 2018, 2018PRE, 2018POST, 2018STAR,
              2019, etc.', in: query, name: season, required: true, schema: {type: string}}],
        summary: Game scores for a specified season., tags: []}}, '/{format}/ScoresBasic/{season}/{week}': {
      get: {operationId: 1413, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: Get game scores for a specified week
          of a season., tags: [Game State Feeds, Scores Feeds]}}, '/{format}/ScoresByDate/{date}': {
      get: {operationId: 1226, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The date of the games.brExamples:
              2021-SEP-12, 2021-NOV-28.', in: query, name: date, required: true, schema: {
              type: string}}], summary: Get game scores for a specified week of a
          season., tags: [Game State Feeds, Scores Feeds]}}, '/{format}/ScoresByWeek/{season}/{week}': {
      get: {operationId: 210, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: Get game scores for a specified week
          of a season., tags: [Game State Feeds, Scores Feeds]}}, '/{format}/SeasonLeagueLeaders/{season}/{position}/{column}': {
      get: {operationId: 180, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: "Player\u2019s position that you\
              \ would like to filter by.", in: query, name: position, required: true,
            schema: {type: string}}, {description: Response member you would like
              results sorted by., in: query, name: column, required: true, schema: {
              type: string}}], summary: null, tags: [Box Scores Feeds]}}, '/{format}/SimulatedBoxScoresV3/{numberofplays}': {
      get: {operationId: 679, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The number of plays to progress
              in this NFL live game simulation. Example entries are 0, 1, 2, 3, 150,
              200, etc.', in: query, name: numberofplays, required: true, schema: {
              type: string}}], summary: 'Gets simulated live box scores of NFL games,
          covering the Conference Championship games on January 21, 2018.', tags: [
          Box Scores Feeds]}}, '/{format}/SimulatedPlayByPlay/{numberofplays}': {
      get: {operationId: 114, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}, {description: 'Only returns player statistics
              that have changed in the last X minutes.  You specify how many minutes
              in time to go back.  Valid entries are:br          1 or 2.', in: query,
            name: minutes, required: true, schema: {type: string}}, {description: 'The
              number of plays to progress in this NFL live game simulation. Example
              entries are 0, 1, 2, 3, 150, 200, etc.', in: query, name: numberofplays,
            required: true, schema: {type: string}}], summary: 'Gets simulated live
          play-by-play of NFL games, covering the Conference Championship games on
          January 21, 2018.', tags: [Play by Play Feeds]}}, '/{format}/SimulatedScores/{numberofplays}': {
      get: {operationId: 680, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'The number of plays to progress
              in this NFL live game simulation. Example entries are 0, 1, 2, 3, 150,
              200, etc.', in: query, name: numberofplays, required: true, schema: {
              type: string}}], summary: 'Gets simulated live scores of NFL games,
          covering the Conference Championship games on January 21, 2018.', tags: [
          Game State Feeds, Scores Feeds]}}, '/{format}/Stadiums': {get: {operationId: 148,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}}],
        summary: This method returns all stadiums., tags: ['Teams, Stadiums  Coaches
            Feeds']}}, '/{format}/Standings/{season}': {get: {operationId: 149, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}, {description: 'Year
              of the season and the season type. If no season type is provided, then
              the default is regular season.          brExamples: 2015REG, 2015PRE,
              2015POST.', in: query, name: season, required: true, schema: {type: string}}],
        summary: null, tags: [Standings Feeds]}}, '/{format}/TeamGameStats/{season}/{week}': {
      get: {operationId: 150, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Year of the season and the season
              type. If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}, {description: 'Week of the season. Valid values
              are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason
              1 to 4.          Example: 1', in: query, name: week, required: true,
            schema: {type: integer}}], summary: null, tags: [Box Scores Feeds]}},
    '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}': {get: {operationId: 1254,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Season to get games from. Example 2019POST, 2020', in: query,
            name: season, required: true, schema: {type: string}}, {description: 'Unique
              ID of team.  Example  8 ', in: query, name: teamid, required: true,
            schema: {type: integer}}, {description: 'How many games to return. Example
              all, 10, 25', in: query, name: numberofgames, required: true, schema: {
              type: string}}], summary: Game by game log of total team statistics.,
        tags: [Box Scores Feeds]}}, '/{format}/TeamSeasonStats/{season}': {get: {
        operationId: 151, parameters: [{description: Desired response format. Valid
              entries are XML or JSON., in: query, name: format, required: true, schema: {
              type: string}}, {description: 'Year of the season and the season type.
              If no season type is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: null, tags: [Box Scores Feeds]}}, '/{format}/TeamTrends/{team}': {
      get: {operationId: 1113, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: 'Abbreviation of a team. Example:
              PHI.', in: query, name: team, required: true, schema: {type: string}}],
        summary: Describes recent team trends and performance against betting data
          in recent sets of games, tags: [Matchups  Trends Feeds]}}, '/{format}/Teams': {
      get: {operationId: 152, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Gets all active teams., tags: ['Teams,
            Stadiums  Coaches Feeds']}}, '/{format}/Teams/{season}': {get: {operationId: 154,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'Year of the season and the season type. If no season type
              is provided, then the default is regular season.          brExamples:
              2015REG, 2015PRE, 2015POST.', in: query, name: season, required: true,
            schema: {type: string}}], summary: List of teams playing in a specified
          season., tags: ['Teams, Stadiums  Coaches Feeds']}}, '/{format}/TeamsBasic': {
      get: {operationId: 1414, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: 'Gets all teams, including pro bowl
          teams.', tags: ['Teams, Stadiums  Coaches Feeds']}}, '/{format}/Timeframes/{type}': {
      get: {operationId: 155, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}, {description: The type of timeframes to return.  Valid
              entries are current or upcoming or completed or recent or all., in: query,
            name: type, required: true, schema: {type: string}}], summary: 'Get detailed
          information about past, present, and future timeframes.', tags: [Schedules  Game
            Day Info Feeds]}}, '/{format}/TransactionsByDate/{date}': {get: {operationId: 1475,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}},
          {description: 'The date of the news.brExamples: 2017-JUL-31, 2017-SEP-01.',
            in: query, name: date, required: true, schema: {type: string}}], summary: null,
        tags: [Rosters  Profiles Feeds, Transactions Feeds]}}, '/{format}/UpcomingDfsSlateOwnershipProjections': {
      get: {operationId: 1234, parameters: [{description: Desired response format.
              Valid entries are XML or JSON., in: query, name: format, required: true,
            schema: {type: string}}], summary: Grabs DFS Slates which have not yet
          started for which we have DFS Ownership projections., tags: [Salaries  Slates
            Feeds]}}, '/{format}/UpcomingSeason': {get: {operationId: 147, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}], summary: 'Year
          of the current NFL season, if we are in the mid-season. If we are in the
          off-season, then year of the next upcoming season. This value changes immediately
          after the Super Bowl. The earliest season for Fantasy data is 2001. The
          earliest season for Team data is 1985.', tags: [Schedules  Game Day Info
            Feeds]}}, '/{format}/UpcomingWeek': {get: {operationId: 158, parameters: [
          {description: Desired response format. Valid entries are XML or JSON., in: query,
            name: format, required: true, schema: {type: string}}], summary: Number
          of the upcoming week of the NFL season. This value usually changes on Tuesday
          nights or Wednesday mornings at midnight ET., tags: [Schedules  Game Day
            Info Feeds]}}, '/{format}/pushauthgamestate': {get: {operationId: 1453,
        parameters: [{description: Desired response format. Valid entries are XML
              or JSON., in: query, name: format, required: true, schema: {type: string}}],
        summary: Returns the push token for the game state channel, tags: [Game State
            Feeds]}}}, servers: [{url: 'https://api.sportsdata.io/v3/nfl'}], tags: [
    {description: Returns the push token for the game state channel, name: PushAuthenticationGameState},
    {description: Returns true if there is at least one game being played at the time
        of the request or false if there are none., name: AreGamesInProgress}, {description: Get
        bye weeks for the teams during a specified NFL season., name: ByeWeeks}, {
      description: Year of the current NFL season. This value changes at the start
        of the new NFL league year. The earliest season for Fantasy data is 2001.
        The earliest season for Team data is 1985. The earliest season for Fantasy
        data is 2001. The earliest season for Team data is 1985., name: SeasonCurrent},
    {description: Year of the most recently completed season. this value changes immediately
        after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest
        season for Team data is 1985., name: SeasonLastCompleted}, {description: 'Year
        of the current NFL season, if we are in the mid-season. If we are in the off-season,
        then year of the next upcoming season. This value changes immediately after
        the Super Bowl. The earliest season for Fantasy data is 2001. The earliest
        season for Team data is 1985.', name: SeasonUpcoming}, {description: Number
        of the current week of the NFL season. This value usually changes on Tuesday
        nights or Wednesday mornings at midnight ET., name: WeekCurrent}, {description: Number
        of the last completed week of the NFL season. This value usually changes on
        Tuesday nights or Wednesday mornings at midnight ET., name: WeekLastCompleted},
    {description: Number of the upcoming week of the NFL season. This value usually
        changes on Tuesday nights or Wednesday mornings at midnight ET., name: WeekUpcoming},
    {description: null, name: News}, {description: null, name: NewsByDate}, {description: null,
      name: NewsByPlayer}, {description: null, name: NewsByTeam}, {description: null,
      name: PlayerDetailsByAvailableLegacy}, {description: null, name: PlayerDetailsByFreeAgentsLegacy},
    {description: null, name: PlayerDetailsByRookieDraftYearLegacy}, {description: null,
      name: PlayersByAvailable}, {description: null, name: PlayersByFreeAgent}, {
      description: null, name: PlayersByRookieDraftYear}, {description: null, name: PlayersByTeam},
    {description: null, name: PlayerDetailsByPlayerLegacy}, {description: null, name: PlayerDetailsByTeam},
    {description: Returns full list of NFL Referees, name: Referees}, {description: Game
        schedule for a specified season., name: SchedulesLegacy}, {description: Game
        schedule for a specified season., name: Schedules}, {description: Get game
        scores for a specified week of a season., name: ScoresByDateLegacy}, {description: Game
        scores for a specified season., name: ScoresBySeasonLegacy}, {description: Get
        game scores for a specified week of a season., name: ScoresByWeekLegacy},
    {description: 'Gets simulated live scores of NFL games, covering the Conference
        Championship games on January 21, 2018.', name: ScoresByWeekSimulation}, {
      description: Get game scores for a specified week of a season., name: ScoresByWeek},
    {description: This method returns all stadiums., name: Stadiums}, {description: null,
      name: Standings}, {description: Gets all active teams., name: TeamsActive},
    {description: 'Gets all teams, including pro bowl teams.', name: TeamsAll}, {
      description: List of teams playing in a specified season., name: TeamsBySeason},
    {description: 'Gets all teams, including pro bowl teams.', name: Teams}, {description: 'Depth
        charts for all NFL teams split by offensive, defensive, and special teams
        position groupings.', name: DepthCharts}, {description: Game by game log of
        total team statistics., name: TeamGameLogsBySeason}, {description: null, name: TeamGameStats},
    {description: null, name: TeamSeasonStats}, {description: 'Get detailed information
        about past, present, and future timeframes.', name: Timeframes}, {description: null,
      name: TransactionsByDate}, {description: 'Returns the list of MarketTypes, BetTypes,
        PeriodTypes, OutcomeTypes, and ResultTypes to map the IDs to descriptive names.
        Also includes a list of the MarketType, BetType  PeriodType combinations which
        we will have resulting for.', name: BettingMetadata}, {description: The list
        of current BettingEvents for the given date. Events in this include market
        information but no outcomes will be included here. Intended to allow both
        visibility to Events in order to match up Events - Scores via the included
        ScoreID (where applicable) as well as provide a list of MarketIDs which are
        included in the given event., name: BettingEventsByDate}, {description: Returns
        the full list of BetttingEvents for the given season. This does not take season-type
        (PRE/POST etc) into account. Intended for those who need to tie BettingEventIDs
        to ScoreIDs., name: BettingEventsBySeason}, {description: Returns available
        Futures outcomes for the given season. Does not include line movement., name: BettingFuturesBySeason},
    {description: Returns full line movement for a given BettingMarket. Is intended
        for historical data purposes and not for the most up to the second lines.,
      name: BettingMarket}, {description: Returns the markets and available outcomes
        for a given BettingEventID., name: BettingMarketsByEvent}, {description: Returns
        the markets and available outcomes for a given ScoreID. Works the same as
        by BettingEventID but requires less ID mapping., name: BettingMarketsByGameIDFormerlyBettingMarketsByScoreID},
    {description: 'Returns Markets and available outcomes for a given event and market
        type requested. A lighter call than by BettingEventID as it only includes
        markets tagged with the specific MarketType (1 - GameLines, 2 - Player Props,
        etc -- full list available in the BettingMetaData endpoint).', name: BettingMarketsByMarketType},
    {description: Gets the available player props Markets  Outcomes for a given ScoreID.,
      name: BettingPlayerPropsByGameIDFormerlyBettingPlayerPropsByScoreID}, {description: Returns
        all outcomes under this market which have a result type associated. Will return
        empty list if resulting has not yet processed for the given game. Resulting
        processes shortly after game closing., name: BettingResultsByMarket}, {description: List
        of Money and Bet Percentage splits for each outcome type available in this
        market. This specific endpoint will return the movement from this market as
        well as the most recent., name: BettingSplitsByBettingMarketId}, {description: null,
      name: DFSSlatesByDate}, {description: null, name: DFSSlatesByWeek}, {description: Slate
        Ownership Projections for a specific slate. Projections are for GPP format
        ownership. Will return an empty list if the slate is not yet projected or
        not a slate we have projections for., name: DFSSlateOwnershipProjectionsBySlateID},
    {description: Grabs DFS Slates which have not yet started for which we have DFS
        Ownership projections., name: UpcomingDFSSlateOwnershipProjections}, {description: null,
      name: ProjectedFantasyDefenseGameStats}, {description: null, name: ProjectedFantasyDefenseSeasonStats},
    {description: List of Money and Bet Percentage splits for each market and their
        respective outcome types available in this game. This specific endpoint will
        return current splits for each available market and no line movement., name: BettingSplitsByGameIDFormerlyBettingSplitsByScoreID},
    {description: Provides in-play odds data for a given week. This means odds for
        games which are in-progress. Only serves the most recently seen data  does
        not include line movement., name: InGameOddsByWeek}, {description: Provides
        in-play odds line movement data for a given game. This means odds for games
        which are in-progress. Serves full line movement and is intended for showing
        the trend over a game rather than the most up-to-the second lines., name: InGameOddsLineMovement},
    {description: 'Returns the non-full-game odds for games in a given week  season.
        This means odds such as 1st-half or 1st-quarter, rather than full game. Only
        returns the most recently seen odds, not-including line movement.', name: PeriodGameOddsByWeek},
    {description: 'Returns the non-full-game odds for games in a given ScoreID. This
        means odds such as 1st-half or 1st-quarter, rather than full game. Returns
        the full line movement for the given game. This endpoint has a longer cache
        as it is meant for historical data/line movement rather than the most up to
        the second line.', name: PeriodGameOddsLineMovement}, {description: 'Returns
        the full-game core odds for games in a given week  season. This means moneyline,
        spread, and total. Only returns the most recently seen odds, not-including
        line movement.', name: PreGameOddsByWeek}, {description: 'Returns the full-game
        core odds for a given ScoreID. This means moneyline, spread, and total. Only
        returns the most recently seen odds, not-including line movement. This endpoint
        has a longer cache as it is meant for historical data/line movement rather
        than the most up to the second line.', name: PreGameOddsLineMovement}, {description: Returns
        trends data for a given pairing of teams. Will return data even if the teams
        are not set to play this season. Intended for use on a specific game though
        it will work for other comparisons if applicable., name: BettingTrendsByMatchup},
    {description: null, name: PremiumNews}, {description: null, name: PremiumNewsByDate},
    {description: null, name: PremiumNewsByPlayer}, {description: null, name: PremiumNewsByTeam},
    {description: 'This endpoint provides all currently injured NFL players, along
        with injury details.', name: InjuredPlayers}, {description: null, name: IDPProjectedPlayerGameStatsByPlayer},
    {description: null, name: IDPProjectedPlayerGameStatsByTeam}, {description: null,
      name: IDPProjectedPlayerGameStatsByWeek}, {description: null, name: ProjectedPlayerGameStatsByTeam},
    {description: null, name: ProjectedPlayerGameStatsByWeek}, {description: null,
      name: ProjectedPlayerSeasonStats}, {description: null, name: ProjectedPlayerSeasonStatsByPlayer},
    {description: null, name: ProjectedPlayerSeasonStatsByTeam}, {description: Returns
        a list for mapping SportsbookID to the Sportsbook name., name: SportsbooksActive},
    {description: Describes recent team trends and performance against betting data
        in recent sets of games, name: BettingTrendsByTeam}, {description: null, name: BoxScoreByGameIDVFormerlyBoxScoreByScoreIDV},
    {description: null, name: BoxScoreV}, {description: 'This method returns all box
        scores for a given season and week, but only returns player stats that have
        changed in the last X minutes. You can also filter by type of player stats
        to include, such as traditional fantasy players, IDP players or all players.',
      name: BoxScoresDeltaV}, {description: 'Gets simulated live box scores of NFL
        games, covering the Conference Championship games on January 21, 2018.', name: BoxScoresVSimulation},
    {description: null, name: DailyFantasyPlayers}, {description: null, name: DailyFantasyScoring},
    {description: null, name: FantasyDefenseGameStats}, {description: null, name: FantasyDefenseGameStatsByTeam},
    {description: null, name: FantasyDefenseSeasonStats}, {description: null, name: FantasyDefenseSeasonStatsByTeam},
    {description: 'This method returns a comprehensive list of draftable fantasy football
        players, including QB, RB, WR, TE, K and DEF.  Players are sorted by ADP (AverageDraftPosition).',
      name: FantasyPlayersWithADP}, {description: null, name: Injuries}, {description: null,
      name: InjuriesByTeam}, {description: null, name: PlayerDetailsByAvailable},
    {description: null, name: PlayerDetailsByFreeAgents}, {description: null, name: PlayerDetailsByRookieDraftYear},
    {description: null, name: PlayerDetailsByPlayer}, {description: null, name: LeagueLeadersByWeek},
    {description: null, name: PlayerGameLogsBySeason}, {description: null, name: PlayerGameStatsByTeam},
    {description: null, name: PlayerGameStatsByWeek}, {description: null, name: PlayerGameStatsByWeekDelta},
    {description: null, name: PlayerGameStatsDelta}, {description: null, name: PlayerGameRedZoneStats},
    {description: null, name: PlayerGameRedZoneStatsInsideFive}, {description: null,
      name: PlayerGameRedZoneStatsInsideTen}, {description: null, name: ProBowlers},
    {description: null, name: FantasyPlayerOwnershipPercentagesSeasonLong}, {description: null,
      name: LeagueLeadersBySeason}, {description: null, name: PlayerSeasonStats},
    {description: null, name: PlayerSeasonStatsByTeam}, {description: null, name: PlayerSeasonRedZoneStats},
    {description: null, name: PlayerSeasonRedZoneStatsInsideFive}, {description: null,
      name: PlayerSeasonRedZoneStatsInsideTen}, {description: null, name: PlayerSeasonThirdDownStats},
    {description: Game schedule for a specified season., name: Schedule}, {description: Get
        game scores for a specified week of a season., name: GamesByDateFormerlyScoresByDate},
    {description: Game scores for a specified season., name: GamesBySeasonFormerlyScoresBySeason},
    {description: Get game scores for a specified week of a season., name: GamesByWeekFormerlyScoresByWeek},
    {description: 'Gets simulated live scores of NFL games, covering the Conference
        Championship games on January 21, 2018.', name: GamesByWeekSimulationFormerlyScoresByWeekSimulation},
    {description: null, name: PlayByPlay}, {description: null, name: PlayByPlayByGameID},
    {description: null, name: PlayByPlayDelta}, {description: 'Gets simulated live
        play-by-play of NFL games, covering the Conference Championship games on January
        21, 2018.', name: PlayByPlaySimulation}, {description: Returns the most recent
        100 changelog events that triggered new simulation runs., name: BAKERChangelog},
    {description: Returns the projected game and team outcomes for a given game.,
      name: BAKERGameProjections}, {description: 'Returns the average projected statsistics
        for the top 50 players sorted by the sort_by parameter.Can be filtered by
        game_id, team, and position.To retreive all players efficiently, use the /team
        endpoint or the /stat endpoint and call them for each team or statistic required.',
      name: BAKERPlayerProjectionsWeekAverage}, {description: Returns the average
        projections for all players on the specified team., name: BAKERPlayerProjectionsWeekAveragePerTeam},
    {description: Returns the average projected statistic for up to 500 players sorted
        in descending order., name: BAKERPlayerProjectionsWeekAverageSingleStatistic},
    {description: Returns a percentile of projections for all players on the specified
        team., name: BAKERPlayerProjectionsWeekPercentilePerTeam}, {description: Returns
        the percentile of the projected statistic for up to 500 players sorted in
        descending order., name: BAKERPlayerProjectionsWeekPercentileSingleStatistic},
    {description: Weekly Best Bets, name: BAKERWeeklyBestBets}, {description: Weekly
        Best Bets Game Picks, name: BAKERWeeklyBestBetsGamePicks}, {description: null,
      name: AdvancedPlayerInfo}, {description: null, name: AdvancedPlayerGameStats},
    {description: null, name: AdvancedPlayerGameStatsByPlayer}, {description: null,
      name: AdvancedPlayerSeasonStatsByPlayer}, {description: null, name: AdvancedPlayerSeasonStatsByTeam},
    {description: null, name: GamePredictions}, {description: null, name: Headshots},
    {description: null, name: AdvancedPlayers}, {description: null, name: RotoworldPlayerNewsRecent},
    {description: null, name: RotoworldPlayerNewsByDate}, {description: Game scores
        for a specified season., name: ScoresBySeason}]}
